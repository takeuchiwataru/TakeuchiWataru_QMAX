//=============================================================================
//
// オブジェクトBG処理 [objectBG.h]
// Author : Mikiya Meguro
//
//=============================================================================
#ifndef _BALL_H_
#define _BALL_H_

#include "main.h"
#include "scene.h"
#include "sceneObject.h"
//*****************************************************************************
//　前方宣言
//*****************************************************************************
//class CModel;
class CSceneObject;
class CMeshOrbit;

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define MAX_MATTEX	(20)
//*****************************************************************************
// 構造体
//*****************************************************************************

//*********************************************************************
//プレイヤークラスの定義
//*********************************************************************
class CBall : public CScene //派生クラス
{
public:
	//モデルの種類
	typedef enum
	{
		MODELTYPE_BALL = 0,	//ビル 0 小
		MODELTYPE_MAX,			//最大数
	}MODELTYPE;

	CBall();
	~CBall();
	HRESULT Init(void);
	void Uninit(void);
	void Update(void);
	void Draw(void);
	void Setpos(D3DXVECTOR3 pos);
	static CBall *Create(D3DXVECTOR3 pos, D3DXVECTOR3 move, MODELTYPE type, int nCollision);
	static HRESULT Load(void);
	static void UnLoad(void);
	D3DXVECTOR3 GetPos(void);
	D3DXVECTOR3 GetMove(void);
	D3DXVECTOR3 GetRot(void);
	int GetTryTimer(void);

	//地面との当たり判定
	void CollisitionGround(void);

	bool CollisionObject(D3DXVECTOR3 *pPos, D3DXVECTOR3 *pPosOld, D3DXVECTOR3 *pMove);

private:
	//メンバ変数
	D3DXVECTOR3					m_pos;				//位置
	D3DXVECTOR3					m_posold;			//前回の位置
	D3DXVECTOR3					m_move;				//移動量
	D3DXVECTOR3					m_ModelMove;		//移動の仕方
	D3DXVECTOR3					m_rot;				//向き
	D3DXMATRIX					m_mtxWorld;			//ワールドマトリックス
	MODELTYPE					m_Type;				//タイプ


	float						m_fDestAngle;		//角度
	float						m_fDiffAngle;		//差分

	static LPD3DXMESH			m_pMesh[MODELTYPE_MAX];			//メッシュ情報へのポインタ
	static LPD3DXBUFFER			m_pBuffMat[MODELTYPE_MAX];		//マテリアル情報へのポインタ
	static LPDIRECT3DTEXTURE9	m_pTexture[MODELTYPE_MAX];		//テクスチャへのポインタ
	static DWORD				m_nNumMat[MODELTYPE_MAX];		//マテリアル情報の数

	int							m_nCount;			// カウンター
	int							m_nCollision;		// 当たり判定のONOFF
	int m_nTimer;
	int m_nTryTimer;
	int m_nPlusX;
	int m_nPlusZ;
	bool						m_bJump;				//ジャンプ状態
	bool m_bHit;
	bool m_bendBall;

public:
	CSceneObject				*m_pObject;
	CMeshOrbit					*m_pMeshOrbit;					//軌跡情報
};

#endif