//=============================================================================
//
// 爆発の処理 [exsplosion.cpp]
// Author : Yamashita
//
//=============================================================================
#include "main.h"
#include "explosion.h"
#include "scene2D.h"
#include "manager.h"
#include "renderer.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE_NAME	"data/TEXTURE/BlossomsAnim.png"		//読み込むテクスチャ　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
LPDIRECT3DTEXTURE9 CExplosion::m_pTexture = {};

//=============================================================================
//	コンストラクタ
//=============================================================================
CExplosion::CExplosion()
{
	
}

//=============================================================================
//デストラクタ
//=============================================================================
CExplosion::~CExplosion()
{

}

//=============================================================================
// テクスチャの読み込み処理
//=============================================================================
HRESULT CExplosion::Load(void)
{
	LPDIRECT3DDEVICE9 pDevice;

	//デバイスの取得
	CManager Manager;
	pDevice = Manager.GetRenderer()->GetDevice();

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice, TEXTURE_NAME, &m_pTexture);

	return S_OK;
}

//=============================================================================
// テクスチャの開放処理
//=============================================================================
void CExplosion::Unload(void)
{
	//テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}
//=============================================================================
// 爆発の初期化処理
//=============================================================================
HRESULT CExplosion::Init(D3DXVECTOR3 pos,D3DXCOLOR col)
{
	//テクスチャの貼り付け
	CScene2D::BindTexture(m_pTexture);

	//初期化
	CScene2D::Init();

	//位置の設定
	SetPosition(pos,700.0f,500.0f);
	CScene2D::SetCol(col);
	//爆発の設定
	SetExplosion(0);

	return S_OK;
}

//=============================================================================
// 爆発の終了処理
//=============================================================================
void CExplosion::Uninit(void)
{
	//終了処理
	CScene2D::Uninit();
}

//=============================================================================
// 爆発の更新処理
//=============================================================================
void CExplosion::Update(void)
{
	//爆発のカウンターを進める
	m_nCounterAnim++;

	if ((m_nCounterAnim % 8) == 0)
	{
		//パターン更新
		m_nPatternAnim = (m_nPatternAnim + 1) % 4;

		//爆発の設定
		SetExplosion(m_nPatternAnim);
	}

}

//=============================================================================
// 爆発の描画処理
//=============================================================================
void CExplosion::Draw(void)
{
	//描画処理
	CScene2D::Draw();
}

//=============================================================================
// 爆発の生成処理
//=============================================================================
CExplosion *CExplosion::Create(D3DXVECTOR3 pos,D3DXCOLOR col)
{
	CExplosion *pExplosion = {};

	if (pExplosion == NULL)
	{//NULLだったら

		//メモリの動的確保
		pExplosion = new CExplosion;

		if (pExplosion != NULL)
		{
			// ポリゴンの初期化処理
			pExplosion->Init(pos,col);
		}
		else
		{
			MessageBox(0, "NULLでした", "警告", MB_OK);
		}
	}
	else
	{
		MessageBox(0, "NULLじゃないです", "警告", MB_OK);
	}

	return pExplosion;
}